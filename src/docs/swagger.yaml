openapi: 3.0.0
info:
  title: ODX API
  version: 1.0.0
  description: API para gerenciamento de casos e evidências na Odontologia Legal

servers:
  - url: https://odx-pericias-back.onrender.com

security:
  - BearerAuth: []

paths:
  /api/auth/register:
    post:
      summary: Registra um novo usuário
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Usuário criado com sucesso

  /api/auth/login:
    post:
      summary: Autentica um usuário
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  /api/auth/logout:
    post:
      summary: Realiza logout do usuário
      tags: [Auth]
      responses:
        '200':
          description: Logout efetuado

  /api/auth/logged-user:
    get:
      summary: Retorna os dados do usuário logado
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário logado

  /api/auth/forgot-password:
    post:
      summary: Redefine senha ou email do usuário logado
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                oldPassword:
                  type: string
                newEmail:
                  type: string
      responses:
        '200':
          description: Informações atualizadas com sucesso

  /api/user/list-users:
    get:
      summary: Lista todos os usuários
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários

  /api/user/{userId}:
    put:
      summary: Edita um usuário (somente Admin)
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Informações do usuário atualizadas com sucesso

    delete:
      summary: Deleta um usuário (somente Admin)
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário deletado com sucesso

  /api/cases:
    post:
      summary: Criar um novo caso
      description: Cria um novo caso com as informações fornecidas.
      tags: [Casos]
      requestBody:
        description: Dados do novo caso a ser criado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseRequest'
      responses:
        '201':
          description: Caso criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Erro na solicitação
        '401':
          description: Usuário não autenticado
        '403':
          description: Permissão negada

    get:
      summary: Listar todos os casos
      description: Retorna uma lista de todos os casos cadastrados.
      tags: [Casos]
      parameters:
        - in: query
          name: titulo
          schema:
            type: string
        - in: query
          name: responsavel
          schema:
            type: string
        - in: query
          name: dataCriacao
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de casos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Case'
        '401':
          description: Usuário não autenticado
        '403':
          description: Permissão negada

  /api/cases/{caseId}:
    patch:
      summary: Atualizar caso
      tags: [Cases]
      parameters:
        - in: path
          name: caseId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUpdate'
      responses:
        '200':
          description: Caso atualizado com sucesso
        '404':
          description: Caso não encontrado
        '500':
          description: Erro ao atualizar caso

    delete:
      summary: Deletar caso
      tags: [Cases]
      parameters:
        - in: path
          name: caseId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Caso deletado com sucesso
        '404':
          description: Caso não encontrado
        '500':
          description: Erro ao deletar caso

  /api/evidence:
    post:
      summary: Adiciona uma nova evidência
      tags: [Evidências]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvidenceRequest'
      responses:
        '200':
          description: Evidência adicionada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '400':
          description: Dados inválidos
        '401':
          description: Não autorizado
        '500':
          description: Erro interno do servidor

  /api/report:
    post:
      summary: Gera um relatório pericial para um caso
      tags: [Relatório]
      parameters:
        - in: path
          name: caseId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Relatório gerado
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Caso ou relatório não encontrado
        '500':
          description: Erro ao gerar o relatório

  /api/report/sign/{reportId}:
    patch:
      summary: Assina digitalmente um relatório
      tags: [Relatório]
      parameters:
        - in: path
          name: reportId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Relatório assinado
        '404':
          description: Relatório não encontrado
        '500':
          description: Erro ao assinar o relatório


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Case:
      type: object
      properties:
        titulo:
          type: string
          example: "Caso de identificação de vítima"
        descricao:
          type: string
          example: "Caso envolvendo a identificação de uma vítima de acidente de carro."
        status:
          type: string
          enum: [Em andamento, Finalizado, Arquivado]
          example: "Em andamento"
        responsavel:
          type: string
          example: "Juliana Costa"
        dataCriacao:
          type: string
          format: date
          example: "2025-04-12"

    Evidence:
      type: object
      properties:
        caso:
          type: string
          description: Título do caso relacionado
        tipo evidencia:
          type: string
          enum: [imagem, texto]
        categoria:
          type: string
          example: "Radiografia Panorâmica"
        dataUpload:
          type: string
          format: date-time
        vitima:
          type: string
          enum: [identificada, não identificada]
        sexo:
          type: string
          enum: [masculino, feminino, indeterminado]
        estadoCorpo:
          type: string
          enum: [inteiro, fragmentado, carbonizado, putrefacto, esqueleto]
        lesoes:
          type: string
        conteudo:
          type: string
        imagemURL:
          type: string
          format: uri
        coletadoPor:
          type: string
          example: "Dra. Helena Costa"
        laudo:
          type: string

    Report:
      type: object
      properties:
        titulo:
          type: string
        descricao:
          type: string
        objetoPericia:
          type: string
        analiseTecnica:
          type: string
        metodoUtilizado:
          type: string
        destinatario:
          type: string
        materiaisUtilizados:
          type: string
        examesRealizados:
          type: string
        consideracoesTecnicoPericiais:
          type: string
        conclusaoTecnica:
          type: string
        caso:
          type: string
        evidencias:
          type: array
          items:
            type: string
        criadoEm:
          type: string
          format: date-time
        assinadoDigitalmente:
          type: boolean

    User:
      type: object
      properties:
        nome:
          type: string
          example: "Juliana Costa"
        email:
          type: string
          format: email
          example: julina.costa@email.com
        senha:
          type: string
          example: "senha"
        perfil:
          type: string
          enum: [Admin, Perito, Assistente]
          example: "Perito"
        rg:
          type: string
          example: "123456789"
        cro:
          type: string
          example: "12345"

    LoginRequest:
      type: object
      required: [email, senha]
      properties:
        email:
          type: string
          format: email
          example: roberta.silva@email.com
        senha:
          type: string
          example: "senha"